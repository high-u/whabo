server {
  listen              80;
  server_name         "~^(?<subdomain>.+)\.example.com";
  return              301                 https://$host$request_uri;
}

server {
  listen              443                 ssl;
  server_name         "~^(?<subdomain>.+)\.example.com";

  ssl_certificate     /etc/nginx/certs/certificates/example.com.crt;
  ssl_certificate_key /etc/nginx/certs/certificates/example.com.key;

  location / {
    set $proxypass "";
    rewrite_by_lua '
      local redis = require "resty.redis"
      local red = redis:new()
      red:set_timeouts(1000, 1000, 1000)
      local ok, err = red:connect("routing-table", 6379)
      if not ok then
        ngx.say("failed to connect: ", err)
        return
      end
      local result, err = red:get(ngx.var.subdomain)
      if result == ngx.null then
        ngx.exit(404)
      else
        ngx.var.proxypass = result
      end
    ';
    proxy_set_header X-Real-IP $remote_addr;
    index index.html index.htm;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;

    resolver        127.0.0.11 valid=5s;
    proxy_pass      http://$proxypass;
    proxy_redirect  off;
  }
}

server {
  listen       80;
  server_name  reverse-proxy;
  location /reload {
    content_by_lua '
      os.execute("/usr/sbin/nginx -s reload")
      ngx.say("Hello openresty")
    ';
  }
}
